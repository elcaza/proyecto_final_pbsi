import os
from base64 import b64decode

class Exploit():
    '''
        Clase que guarda el exploit dentro del directorio files y guarda la referencia en la base de datos

        .......
        Atributos
        ---------
        parametros : dict
            variable que contiene los datos suficientes para crear y guardar el exploit

        extension : str
            nombre de la extension del archivo a almacenar

        exploit : str
            nombre del exploit

        ruta : str
            ruta donde se guardara el exploit

        contenido : str
            contenido decodificado de base64 del exploit

        software_nombre : str
            nombre del software al cual es vulnerable

        software_version : str
            version del software al cual es vulnerable

        cms_nombre : str
            nombre del cms al cual la extension es vulnerable

        cms_categoria : str
            categoria del cms al cual la extension es vulnerable

        cms_extension_nombre : str
            nombre de la extension la cual vulnerable

        cms_extension_version : str
            version de la extension la cual vulnerable

        cve : str
            cve del exploit en caso de tener uno

        Metodos
        -------
        crear_archivo_exploit():
            almacena el archivo en el sistema operativo

        get_extension():
            regresa la extension

        get_exploit():
            regresa el nombre del exploit

        get_contenido():
            regresa el contenido del exploit

        get_software():
            regresa las propiedades del software

        get_cms():
            regresa las propiedades de la extension 

        get_ruta():
            obtiene la ruta de donde se almacenaran los archivos

        set_exploit():
            obtiene el nombre del exploit desde los parametros

        set_contenido():
            obtiene el contenido del exploit desde los parametros

        set_extension():
            obtiene la extension del exploit desde los parametros

        set_software():
            obtiene el nombre y version del software al cual es vulnerable desde los parametros

        set_cms():
            obtiene el nombre del cms, categoria de la extension, nombre de la extension, version de la extension de la extension 
            al cual es vulnerable desde los parametros

        set_cve():
            obtiene el cve de los parametros

        cargar_exploit_mongo():
            llama a la funcion correspondiente para formatear la referencia del exploit

        cargar_exploit_software_mongo():
            formatea los datos del exploit con base en software para que se pueda guardar una referencia del exploit en la base de datos
            
        cargar_exploit_cms_mongo():
            formatea los datos del exploit con base en extension para que se pueda guardar una referencia del exploit en la base de datos

    '''
    def __init__(self, parametros):
        self.parametros = parametros
        self.set_exploit()
        self.set_contenido()
        self.set_software()
        self.set_cms()
        self.set_extension()
        self.get_ruta()
        self.set_cve()
        if self.crear:
            self.crear_archivo_exploit()

    def crear_archivo_exploit(self):
        '''
            almacena el archivo en el sistema operativo
        '''
        with open(self.ruta+"/"+self.exploit,"wb") as archivo_exploit:
            archivo_exploit.write(b64decode(self.contenido))
        return True

    def get_extension(self):
        '''
            regresa la extension
        '''
        return self.extension

    def get_exploit(self):
        '''
            regresa el nombre del exploit
        '''
        return self.exploit
    
    def get_contenido(self):
        '''
            regresa el contenido del exploit
        '''
        return self.contenido

    def get_software(self):
        '''
            regresa las propiedades del software
        '''
        return self.software_nombre, self.software_version
        
    def get_cms(self):
        '''
            regresa las propiedades de la extension 
        '''
        return self.cms_nombre, self.cms_categoria, self.cms_extension_nombre, self.cms_extension_version

    def get_ruta(self):
        '''
            obtiene la ruta de donde se almacenaran los archivos
        '''
        self.ruta = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(os.path.dirname(__file__)))),"files")
        return self.ruta 

    def set_exploit(self):
        '''
            obtiene el nombre del exploit desde los parametros
            
            sino tiene nombre lo crea como exploit_generico.sh
        '''
        if "exploit" in self.parametros:
                self.exploit = self.parametros["exploit"]
        else:
            self.exploit = "exploit_generico.sh"
    
    def set_contenido(self):
        '''
            obtiene el contenido del exploit desde los parametros

            sino tiene contenido se le asigna el valor por defecto "echo "inconcluso""
        '''
        if "contenido" in self.parametros:
                try:
                    self.contenido = self.parametros["contenido"].split("base64,")[1]
                    self.crear = True
                except:
                    self.crear = False
        else:
            self.contenido = "ZWNobyAiSW5jb25jbHVzbyI="
    
    def set_extension(self):
        '''
            obtiene la extension del exploit desde los parametros

            sino tiene extension se le asigna de tipo shell
        '''
        if "extension" in self.parametros:
                self.extension = self.parametros["extension"]
        else:
            self.extension = ""

    def set_software(self):
        '''
            obtiene el nombre y version del software al cual es vulnerable desde los parametros

            prueba obtener la version, caso contrario asgina por defecto 0
            sino tiene nombre ni version asigna a cadena vacia
        '''
        if "software" in self.parametros:
                self.software_nombre = self.parametros["software"]["software_nombre"]
                self.software_version = self.parametros["software"]["software_version"]
                try:
                    self.software_version = float(self.software_version)
                except:
                    self.software_version = 0
        else:
            self.software_nombre = ""
            self.software_version = 0

    def set_cms(self):
        '''
            obtiene el nombre del cms, categoria de la extension, nombre de la extension, version de la extension de la extension 
            al cual es vulnerable desde los parametros

            prueba obtener la version, caso contrario asgina por defecto 0
            sino tiene nombre o version o nombre de la extesion o version de la extension asigna a cadena vacia
        '''
        if "cms" in self.parametros:
                self.cms_nombre = self.parametros["cms"]["cms_nombre"]
                self.cms_categoria = self.parametros["cms"]["cms_categoria"]
                self.cms_extension_nombre = self.parametros["cms"]["cms_extension_nombre"]
                self.cms_extension_version = self.parametros["cms"]["cms_extension_version"]
                try:
                    self.cms_extension_version = float(self.cms_extension_version)
                except:
                    self.cms_extension_version = 0
        else:
            self.cms_nombre = ""
            self.cms_categoria = ""
            self.cms_extension_nombre = ""
            self.cms_extension_version = 0
          
    def set_cve(self):
        '''
            obtiene el cve de los parametros

            sino tiene le asigna cadena vacia
        '''
        if "cve" in self.parametros:
            self.cve = self.parametros["cve"]
        else:
            self.cve = ""

    def cargar_exploit_mongo(self):
        '''
            llama a la funcion correspondiente para formatear la referencia del exploit
        '''
        if self.software_nombre == "":
            return self.cargar_exploit_cms_mongo()
        return self.cargar_exploit_software_mongo()

    def cargar_exploit_software_mongo(self):
        '''
            formatea los datos del exploit con base en software para que se pueda guardar una referencia del exploit en la base de datos
        '''
        return {
                "exploit":self.exploit,
                "extension":self.extension,
                "ruta":self.ruta,    
                "software_nombre":self.software_nombre,
                "software_version":self.software_version,
                "cve":self.cve
                }
    
    def cargar_exploit_cms_mongo(self):
        '''
            formatea los datos del exploit con base en extension para que se pueda guardar una referencia del exploit en la base de datos
        '''
        return {
                "exploit":self.exploit,
                "extension":self.extension,
                "ruta":self.ruta,
                "cms_nombre":self.cms_nombre,
                "cms_categoria":self.cms_categoria,
                "cms_extension_nombre":self.cms_extension_nombre,
                "cms_extension_version":self.cms_extension_version,
                "cve":self.cve  
                }

def execute(parametros):
    '''
        lanza la ejecucion de la creacion del exploit

        Parametros
        ----------
        parametros : dict
    '''
    exploit = Exploit(parametros)
    return exploit.cargar_exploit_mongo()
