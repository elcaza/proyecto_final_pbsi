from base64 import b64decode
import os

class Exploit():
    def __init__(self, parametros):
        self.set_exploit(parametros)
        self.set_contenido(parametros)
        self.set_software(parametros)
        self.set_cms(parametros)
        self.set_extension(parametros)
        self.get_ruta()
        self.set_cve(parametros)

    def crear_archivo_exploit(self):
        with open(self.ruta+"/"+self.exploit,"wb") as archivo_exploit:
            archivo_exploit.write(b64decode(self.contenido))
        return True

    def get_extension(self):
        return self.extension

    def get_exploit(self):
        return self.exploit
    
    def get_contenido(self):
        return self.contenido

    def get_software(self):
        return self.software_nombre, self.software_version
        
    def get_cms(self):
        return self.cms_nombre, self.cms_categoria, self.cms_extension_nombre, self.cms_extension_version

    def get_ruta(self):
        self.ruta = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(os.path.dirname(__file__)))),"files")
        return self.ruta 

    def set_exploit(self,parametros):
        if "exploit" in parametros:
                self.exploit = parametros["exploit"]
        else:
            self.exploit = "exploit_generico.sh"
    
    def set_contenido(self,parametros):
        if "contenido" in parametros:
                self.contenido = parametros["contenido"]
        else:
            self.contenido = "ZWNobyAiRXhpdG8i"
    
    def set_extension(self, parametros):
        if "extension" in parametros:
                self.extension = parametros["extension"]
        else:
            self.extension = ""

    def set_software(self,parametros):
        if "software" in parametros:
                self.software_nombre = parametros["software"]["nombre"]
                self.software_version = parametros["software"]["version"]
                try:
                    self.software_version = float(self.software_version)
                except:
                    self.software_version = 0
        else:
            self.software_nombre = ""
            self.software_version = ""

    def set_cms(self,parametros):
        if "cms" in parametros:
                self.cms_nombre = parametros["cms"]["cms_nombre"]
                self.cms_categoria = parametros["cms"]["cms_categoria"]
                self.cms_extension_nombre = parametros["cms"]["cms_extension_nombre"]
                self.cms_extension_version = parametros["cms"]["cms_extension_version"]
                try:
                    self.cms_extension_version = float(self.cms_extension_version)
                except:
                    self.cms_extension_version = 0
        else:
            self.cms_nombre = ""
            self.cms_categoria = ""
            self.cms_extension_nombre = ""
            self.cms_extension_version = 0
        
        
    
    def set_cve(self,parametros):
        if "cve" in parametros:
            self.cve = parametros["cve"]
        else:
            self.cve = ""

    def cargar_exploit_mongo(self):
        if self.software_nombre == "":
            return self.cargar_exploit_cms_mongo()
        return self.cargar_exploit_software_mongo()

    def cargar_exploit_software_mongo(self):
        return {
                "exploit":self.exploit,
                "extension":self.extension,
                "ruta":self.ruta,    
                "software_nombre":self.software_nombre,
                "software_version":self.software_version,
                "cve":self.cve
                }
    
    def cargar_exploit_cms_mongo(self):
        return {
                "exploit":self.exploit,
                "extension":self.extension,
                "ruta":self.ruta,
                "cms_nombre":self.cms_nombre,
                "cms_categoria":self.cms_categoria,
                "cms_extension_nombre":self.cms_extension_nombre,
                "cms_extension_version":self.cms_extension_version,
                "cve":self.cve  
                }

def execute(parametros):
    exploit = Exploit(parametros)
    exploit.crear_archivo_exploit()
    return exploit.cargar_exploit_mongo()
